"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[361],{3595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(4848),o=t(8453);const s={},i="useChangeTone",a={id:"hooks/use-change-tone",title:"useChangeTone",description:"The useChangeTone hook is responsible for changing the tone of a given text by sending a request to an external API. It returns an asynchronous function changeTone that performs the tone modification and returns the result.",source:"@site/docs/hooks/use-change-tone.md",sourceDirName:"hooks",slug:"/hooks/use-change-tone",permalink:"/text_mood_processor_frontend/hooks/use-change-tone",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useAnalyzeTone",permalink:"/text_mood_processor_frontend/hooks/use-analyze-tone"},next:{title:"useTextMoodProcessor",permalink:"/text_mood_processor_frontend/hooks/use-text-mood-processor"}},l={},c=[{value:"Functionality",id:"functionality",level:2},{value:"API Call",id:"api-call",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Usage Example",id:"usage-example",level:3},{value:"ChangeToneResult Interface",id:"changetoneresult-interface",level:3},{value:"Environment Variable",id:"environment-variable",level:3},{value:"Error Handling",id:"error-handling-1",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usechangetone",children:"useChangeTone"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useChangeTone"})," hook is responsible for changing the tone of a given text by sending a request to an external API. It returns an asynchronous function ",(0,r.jsx)(n.code,{children:"changeTone"})," that performs the tone modification and returns the result."]}),"\n",(0,r.jsx)(n.h2,{id:"functionality",children:"Functionality"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"changeTone: (text: string, target_tone: string) => Promise<ChangeToneResult | null>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text"}),": A string that represents the text to be modified."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target_tone"}),': A string that specifies the desired tone (e.g., "friendly", "serious", "funny").']}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output"}),": A ",(0,r.jsx)(n.code,{children:"Promise"})," that resolves to a ",(0,r.jsx)(n.code,{children:"ChangeToneResult"})," object if the request is successful, or ",(0,r.jsx)(n.code,{children:"null"})," if an error occurs."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"api-call",children:"API Call"}),"\n",(0,r.jsxs)(n.p,{children:["The hook sends a POST request to the tone modification API using the URL defined in the environment variable ",(0,r.jsx)(n.code,{children:"VITE_CHANGE_TONE_URL"}),". The request includes the text and the target tone in the request body."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method"}),": ",(0,r.jsx)(n.code,{children:"POST"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Content-Type"}),": ",(0,r.jsx)(n.code,{children:"application/json"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Body"}),": The text and the desired target tone in JSON format."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const response = await fetch(`${apiUrl}`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({ text, target_tone }),\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"If the request fails or the server responds with an error status code, an error is thrown and caught in the try-catch block. The function logs the error to the console and returns null."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (!response.ok) {\n  throw new Error(`Error: ${response.status}`);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In case of an error, the hook captures the error message, checks if the error is an instance of Error, and logs the appropriate message."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const errorMessage = error instanceof Error ? error.message : 'Unknown error';\nconsole.error('Failed to change tone:', errorMessage);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport useChangeTone from './useChangeTone';\n\nconst TextToneChanger = () => {\n  const { changeTone } = useChangeTone();\n  const [result, setResult] = useState(null);\n\n  const handleChangeTone = async () => {\n    const text = 'This is a test text.';\n    const tone = 'friendly';\n    const changeResult = await changeTone(text, tone);\n    setResult(changeResult);\n  };\n\n  return (\n    <div>\n      <button onClick={handleChangeTone}>Change Tone</button>\n      {result && (\n        <div>\n          <h3>Change Tone Result</h3>\n          <pre>{JSON.stringify(result, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextToneChanger;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"changetoneresult-interface",children:"ChangeToneResult Interface"}),"\n",(0,r.jsx)(n.p,{children:"The ChangeToneResult type defines the shape of the response returned by the API after modifying the tone. This type is imported from a types file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export interface ChangeToneResult {\n  original_text: string;\n  modified_text: string;\n  applied_tone: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the example above, the changeTone function sends a request to modify the tone of a text, and the result is displayed once the promise resolves. If an error occurs, it is logged in the console, and null is returned."}),"\n",(0,r.jsx)(n.h3,{id:"environment-variable",children:"Environment Variable"}),"\n",(0,r.jsx)(n.p,{children:"The API URL is retrieved from the environment variable VITE_CHANGE_TONE_URL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const apiUrl = import.meta.env.VITE_CHANGE_TONE_URL;\n"})}),"\n",(0,r.jsx)(n.p,{children:"This allows you to configure different API endpoints for different environments (e.g., development, production) without hardcoding the URL into the code."}),"\n",(0,r.jsx)(n.h3,{id:"error-handling-1",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"If the fetch request fails or an error occurs during the request, the error is logged in the console:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"console.error('Failed to change tone:', errorMessage);\n"})}),"\n",(0,r.jsx)(n.p,{children:"The hook will return null when an error occurs."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);