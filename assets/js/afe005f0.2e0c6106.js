"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[350],{804:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(4848),s=t(8453);const r={},i="ToneSelector",l={id:"components/tone-selector",title:"ToneSelector",description:'The ToneSelector component is a dropdown (select) input that allows the user to choose a tone. The available tones are predefined as "serious", "friendly", and "funny".',source:"@site/docs/components/tone-selector.md",sourceDirName:"components",slug:"/components/tone-selector",permalink:"/text_mood_processor_frontend/components/tone-selector",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TextAreaInput",permalink:"/text_mood_processor_frontend/components/text-area-input"},next:{title:"useAnalyzeTone",permalink:"/text_mood_processor_frontend/hooks/use-analyze-tone"}},d={},c=[{value:"Props",id:"props",level:2},{value:"<code>selectedTone: string</code>",id:"selectedtone-string",level:3},{value:"<code>setSelectedTone: (tone: string) =&gt; void</code>",id:"setselectedtone-tone-string--void",level:3},{value:"Features",id:"features",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Tones Array",id:"tones-array",level:3},{value:"Customization",id:"customization",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"toneselector",children:"ToneSelector"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ToneSelector"}),' component is a dropdown (select) input that allows the user to choose a tone. The available tones are predefined as "serious", "friendly", and "funny".']}),"\n",(0,o.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(n.h3,{id:"selectedtone-string",children:(0,o.jsx)(n.code,{children:"selectedTone: string"})}),"\n",(0,o.jsx)(n.p,{children:"The currently selected tone, which is displayed as the value in the dropdown. It is controlled by the parent component."}),"\n",(0,o.jsx)(n.h3,{id:"setselectedtone-tone-string--void",children:(0,o.jsx)(n.code,{children:"setSelectedTone: (tone: string) => void"})}),"\n",(0,o.jsx)(n.p,{children:"A function that updates the selected tone in the parent component. It is called whenever the user selects a different tone from the dropdown."}),"\n",(0,o.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Predefined Tones"}),": The dropdown provides three options for tones:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Serious"}),"\n",(0,o.jsx)(n.li,{children:"Friendly"}),"\n",(0,o.jsx)(n.li,{children:"Funny"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Default Option"}),': The first option prompts the user to "Select tone", and it is disabled to ensure that the user picks one of the available tones.']}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Styling"}),": The component is styled with TailwindCSS classes to ensure a consistent appearance and smooth transitions when the user interacts with it."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { ToneSelector } from './ToneSelector';\n\nconst Example = () => {\n  const [selectedTone, setSelectedTone] = useState('');\n\n  return (\n    <div>\n      <ToneSelector selectedTone={selectedTone} setSelectedTone={setSelectedTone} />\n      <p>Selected Tone: {selectedTone}</p>\n    </div>\n  );\n};\n\nexport default Example;\n"})}),"\n",(0,o.jsx)(n.p,{children:"In this example, the ToneSelector allows the user to choose a tone from the predefined list. The selectedTone state is updated via the setSelectedTone function whenever the user selects a new tone."}),"\n",(0,o.jsx)(n.h3,{id:"tones-array",children:"Tones Array"}),"\n",(0,o.jsx)(n.p,{children:"The tones available in the dropdown are predefined in the component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const tones = ['serious', 'friendly', 'funny'];\n"})}),"\n",(0,o.jsx)(n.p,{children:"The tones are rendered as options, and each tone is capitalized before being displayed to the user:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<option key={tone} value={tone}>\n  {tone.charAt(0).toUpperCase() + tone.slice(1)}\n</option>\n"})}),"\n",(0,o.jsx)(n.p,{children:"This ensures a user-friendly display while keeping the internal values simple."}),"\n",(0,o.jsx)(n.h3,{id:"customization",children:"Customization"}),"\n",(0,o.jsx)(n.p,{children:"If you need to extend the list of tones or allow dynamic options, you can modify the tones array or pass it as a prop to the component."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);