"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[774],{1856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(4848),a=n(8453);const s={},i="TextAreaInput",o={id:"components/text-area-input",title:"TextAreaInput",description:"The TextAreaInput component is responsible for providing a text input area with a character counter and validation messages. It ensures that the user cannot input more than 500 characters and provides feedback for the minimum character requirement.",source:"@site/docs/components/text-area-input.md",sourceDirName:"components",slug:"/components/text-area-input",permalink:"/text_mood_processor_frontend/components/text-area-input",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ChangeToneResultDisplay",permalink:"/text_mood_processor_frontend/components/change-tone-result-display"},next:{title:"ToneSelector",permalink:"/text_mood_processor_frontend/components/tone-selector"}},c={},l=[{value:"Props",id:"props",level:2},{value:"<code>text: string</code>",id:"text-string",level:3},{value:"<code>setText: (text: string) =&gt; void</code>",id:"settext-text-string--void",level:3},{value:"Features",id:"features",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Character Limitation",id:"character-limitation",level:3},{value:"Validation",id:"validation",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"textareainput",children:"TextAreaInput"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"TextAreaInput"})," component is responsible for providing a text input area with a character counter and validation messages. It ensures that the user cannot input more than 500 characters and provides feedback for the minimum character requirement."]}),"\n",(0,r.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,r.jsx)(t.h3,{id:"text-string",children:(0,r.jsx)(t.code,{children:"text: string"})}),"\n",(0,r.jsx)(t.p,{children:"The current value of the text entered by the user."}),"\n",(0,r.jsx)(t.h3,{id:"settext-text-string--void",children:(0,r.jsx)(t.code,{children:"setText: (text: string) => void"})}),"\n",(0,r.jsx)(t.p,{children:"A function to update the value of the text. It is called whenever the user types in the textarea, provided that the length of the input is 500 characters or less."}),"\n",(0,r.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Character Counter"}),": A counter is displayed in the bottom-right corner of the textarea, showing how many characters the user has typed, with a maximum limit of 500 characters."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Validation Messages"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"If the text contains fewer than 50 characters, a message is displayed indicating that at least 50 characters are required for certain actions (like enabling buttons)."}),"\n",(0,r.jsx)(t.li,{children:"Another message encourages the user to enter more than 300 characters for better analysis accuracy."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { TextAreaInput } from './TextAreaInput';\n\nconst Example = () => {\n  const [text, setText] = useState('');\n\n  return (\n    <div>\n      <TextAreaInput text={text} setText={setText} />\n      {/* Additional components can use the text state here */}\n    </div>\n  );\n};\n\nexport default Example;\n"})}),"\n",(0,r.jsx)(t.p,{children:"In this example, the TextAreaInput component is used to handle user input. The text state is updated via the setText function, and the component displays the input text along with a character counter and validation messages."}),"\n",(0,r.jsx)(t.h3,{id:"character-limitation",children:"Character Limitation"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The input field is limited to 500 characters. The setText function ensures that no more characters are added once the limit is reached:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"if (e.target.value.length <= 500) {\n  setText(e.target.value);\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"This limitation prevents the user from entering more than 500 characters and is visually indicated by the character counter."}),"\n",(0,r.jsx)(t.h3,{id:"validation",children:"Validation"}),"\n",(0,r.jsx)(t.p,{children:"Two validation messages are displayed:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Minimum 50 characters"}),": A message in red indicates that at least 50 characters are needed for the buttons to function."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"More precise analysis with 300+ characters"}),": A message suggests that text analysis results will be more accurate when more than 300 characters are provided."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(6540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);