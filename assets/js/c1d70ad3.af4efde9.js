"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[894],{4036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=n(4848),s=n(8453);const i={},l="ChangeToneResultDisplay",r={id:"components/change-tone-result-display",title:"ChangeToneResultDisplay",description:"The ChangeToneResultDisplay component is responsible for displaying the results of a tone change. It shows the original text, the modified text after the tone change, and the applied tone.",source:"@site/docs/components/change-tone-result-display.md",sourceDirName:"components",slug:"/components/change-tone-result-display",permalink:"/text_mood_processor_frontend/components/change-tone-result-display",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ChangeToneButton",permalink:"/text_mood_processor_frontend/components/change-tone-button"},next:{title:"TextAreaInput",permalink:"/text_mood_processor_frontend/components/text-area-input"}},a={},d=[{value:"Props",id:"props",level:2},{value:"<code>result: { original_text: string, modified_text: string, applied_tone: string } | null</code>",id:"result--original_text-string-modified_text-string-applied_tone-string---null",level:3},{value:"Example of <code>result</code> object:",id:"example-of-result-object",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Features",id:"features",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"changetoneresultdisplay",children:"ChangeToneResultDisplay"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ChangeToneResultDisplay"})," component is responsible for displaying the results of a tone change. It shows the original text, the modified text after the tone change, and the applied tone."]}),"\n",(0,o.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(t.h3,{id:"result--original_text-string-modified_text-string-applied_tone-string---null",children:(0,o.jsx)(t.code,{children:"result: { original_text: string, modified_text: string, applied_tone: string } | null"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"original_text"}),": A string representing the original text before the tone was changed."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"modified_text"}),": A string representing the text after the tone change."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"applied_tone"}),": A string representing the tone that was applied to modify the text."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["When the ",(0,o.jsx)(t.code,{children:"result"})," prop is ",(0,o.jsx)(t.code,{children:"null"}),", the component returns ",(0,o.jsx)(t.code,{children:"null"})," and nothing is displayed."]}),"\n",(0,o.jsxs)(t.h3,{id:"example-of-result-object",children:["Example of ",(0,o.jsx)(t.code,{children:"result"})," object:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'const result = {\n  original_text: "I am not happy.",\n  modified_text: "I am thrilled!",\n  applied_tone: "positive"\n};\n'})}),"\n",(0,o.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import React from \'react\';\nimport { ChangeToneResultDisplay } from \'./ChangeToneResultDisplay\';\n\nconst exampleResult = {\n  original_text: "I am not happy.",\n  modified_text: "I am thrilled!",\n  applied_tone: "positive"\n};\n\nconst Example = () => {\n  return (\n    <ChangeToneResultDisplay result={exampleResult} />\n  );\n};\n\nexport default Example;\n\n'})}),"\n",(0,o.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Copy Modified Text"}),': There is a "Copy" button that allows the user to copy only the modified text to the clipboard. When clicked, the modified text is copied using the browser\'s navigator.clipboard.writeText method.']}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<button\n  onClick={() => navigator.clipboard.writeText(result.modified_text)}\n  className="absolute top-2 right-2 text-sm p-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 transition-all duration-300"\n>\n  Copy\n</button>\n'})}),"\n",(0,o.jsx)(t.p,{children:"In this example, the ChangeToneResultDisplay component renders the results of the tone change, including the original text, the modified text, and the applied tone. It also provides a button to copy the modified text."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var o=n(6540);const s={},i=o.createContext(s);function l(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);