"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[553],{8094:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var o=t(4848),s=t(8453);const l={},i="main",r={id:"app",title:"main",description:"The App component is the main container for the Text Mood Processor application. It manages the input of text, performs tone analysis, and handles tone changes using several UI components and custom hooks.",source:"@site/docs/app.md",sourceDirName:".",slug:"/app",permalink:"/text_mood_processor_frontend/app",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"AnalyzeButton",permalink:"/text_mood_processor_frontend/components/analyze-button"}},d={},a=[{value:"Features",id:"features",level:2},{value:"Components Used",id:"components-used",level:2},{value:"<code>TextAreaInput</code>",id:"textareainput",level:3},{value:"<code>AnalyzeButton</code>",id:"analyzebutton",level:3},{value:"<code>ChangeToneButton</code>",id:"changetonebutton",level:3},{value:"<code>AnalyzeResultDisplay</code>",id:"analyzeresultdisplay",level:3},{value:"<code>ChangeToneResultDisplay</code>",id:"changetoneresultdisplay",level:3},{value:"<code>ToneSelector</code>",id:"toneselector",level:3},{value:"Hooks Used",id:"hooks-used",level:2},{value:"<code>useTextMoodProcessor</code>",id:"usetextmoodprocessor",level:3},{value:"Key functions from <code>useTextMoodProcessor</code>:",id:"key-functions-from-usetextmoodprocessor",level:3},{value:"UI Layout",id:"ui-layout",level:2},{value:"Main Layout",id:"main-layout",level:3},{value:"Buttons",id:"buttons",level:3},{value:"Tone Selector Modal",id:"tone-selector-modal",level:3},{value:"Footer",id:"footer",level:2},{value:"Conclusion",id:"conclusion",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"main",children:"main"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"App"})," component is the main container for the ",(0,o.jsx)(n.strong,{children:"Text Mood Processor"})," application. It manages the input of text, performs tone analysis, and handles tone changes using several UI components and custom hooks."]}),"\n",(0,o.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Text Input"}),": Allows the user to input text for analysis."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tone Analysis"}),": Analyzes the mood of the text and displays the result."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tone Change"}),": Allows the user to select a different tone and modify the text."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"UI Components"}),": Displays buttons, text area, and results, and includes a modal for tone selection."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"components-used",children:"Components Used"}),"\n",(0,o.jsx)(n.h3,{id:"textareainput",children:(0,o.jsx)(n.code,{children:"TextAreaInput"})}),"\n",(0,o.jsx)(n.p,{children:"A component that renders a textarea for the user to input text. It includes character count and validation to ensure the text length is appropriate for analysis or tone change."}),"\n",(0,o.jsx)(n.h3,{id:"analyzebutton",children:(0,o.jsx)(n.code,{children:"AnalyzeButton"})}),"\n",(0,o.jsx)(n.p,{children:"A button component that triggers the tone analysis when clicked. It is disabled until the user enters at least 50 characters in the text area."}),"\n",(0,o.jsx)(n.h3,{id:"changetonebutton",children:(0,o.jsx)(n.code,{children:"ChangeToneButton"})}),"\n",(0,o.jsxs)(n.p,{children:["A button component that triggers the tone change process. Like the ",(0,o.jsx)(n.code,{children:"AnalyzeButton"}),", it is disabled until at least 50 characters are entered in the text area."]}),"\n",(0,o.jsx)(n.h3,{id:"analyzeresultdisplay",children:(0,o.jsx)(n.code,{children:"AnalyzeResultDisplay"})}),"\n",(0,o.jsx)(n.p,{children:"Displays the results of the tone analysis, including the detected emotions and the predominant emotion."}),"\n",(0,o.jsx)(n.h3,{id:"changetoneresultdisplay",children:(0,o.jsx)(n.code,{children:"ChangeToneResultDisplay"})}),"\n",(0,o.jsx)(n.p,{children:"Displays the results after the tone change, showing the modified text and the applied tone."}),"\n",(0,o.jsx)(n.h3,{id:"toneselector",children:(0,o.jsx)(n.code,{children:"ToneSelector"})}),"\n",(0,o.jsx)(n.p,{children:"A dropdown component that allows the user to select a new tone for modifying the text. It appears in a modal when the user opts to change the tone."}),"\n",(0,o.jsx)(n.h2,{id:"hooks-used",children:"Hooks Used"}),"\n",(0,o.jsx)(n.h3,{id:"usetextmoodprocessor",children:(0,o.jsx)(n.code,{children:"useTextMoodProcessor"})}),"\n",(0,o.jsx)(n.p,{children:"The custom hook that manages all the state and logic for the text mood processing, including:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"text"}),": The text entered by the user."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"selectedTone"}),": The tone selected by the user for modification."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"analyzeResult"}),": The result of the tone analysis."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"changeToneResult"}),": The result of the tone change."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"showToneSelector"}),": A boolean that controls the visibility of the tone selector modal."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"key-functions-from-usetextmoodprocessor",children:["Key functions from ",(0,o.jsx)(n.code,{children:"useTextMoodProcessor"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"handleAnalyzeTone"}),": Triggers the tone analysis when the user clicks the ",(0,o.jsx)(n.code,{children:"AnalyzeButton"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"handleChangeTone"}),": Shows the tone selector modal when the user clicks the ",(0,o.jsx)(n.code,{children:"ChangeToneButton"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"handleAcceptToneChange"}),': Applies the selected tone to the text when the user clicks the "Accept" button in the tone selector modal.']}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"ui-layout",children:"UI Layout"}),"\n",(0,o.jsx)(n.h3,{id:"main-layout",children:"Main Layout"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"App"})," component uses a flexbox layout to center the content. The main container has padding and a max-width to ensure responsiveness. The background is styled with a gradient that spans from purple to pink for a visually appealing design."]}),"\n",(0,o.jsx)(n.h3,{id:"buttons",children:"Buttons"}),"\n",(0,o.jsx)(n.p,{children:"Two buttons are rendered below the textarea input:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Analyze Tone"})," button: Triggers the tone analysis when clicked."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Change Tone"})," button: Opens the modal to select a new tone."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The buttons are styled using TailwindCSS for a modern UI design, with hover effects and smooth transitions."}),"\n",(0,o.jsx)(n.h3,{id:"tone-selector-modal",children:"Tone Selector Modal"}),"\n",(0,o.jsx)(n.p,{children:'When the user clicks "Change Tone", a modal is displayed over the content, allowing the user to select a new tone for the text. The modal has two buttons:'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Accept"}),": Applies the selected tone."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cancel"}),": Closes the modal without changing the tone."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"footer",children:"Footer"}),"\n",(0,o.jsx)(n.p,{children:"A footer is included at the bottom of the app with simple copyright information."}),"\n",(0,o.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["The App component integrates various UI components and hooks to create a cohesive experience for analyzing and modifying the tone of text. It is built with ",(0,o.jsx)(n.strong,{children:"React"}),", ",(0,o.jsx)(n.strong,{children:"TypeScript"}),", ",(0,o.jsx)(n.strong,{children:"TailwindCSS"}),", and relies on custom hooks for managing the tone processing logic."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(6540);const s={},l=o.createContext(s);function i(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);