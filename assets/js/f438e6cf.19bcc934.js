"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34],{4214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=t(4848),s=t(8453);const a={},i="ChangeToneButton",l={id:"components/change-tone-button",title:"ChangeToneButton",description:"The ChangeToneButton component is responsible for triggering the tone change functionality. It renders a button that calls the onChangeTone function when clicked. The button can also be disabled based on the disabled prop.",source:"@site/docs/components/change-tone-button.md",sourceDirName:"components",slug:"/components/change-tone-button",permalink:"/text_mood_processor_frontend/components/change-tone-button",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AnalyzeResultDisplay",permalink:"/text_mood_processor_frontend/components/analyze-result-display"},next:{title:"ChangeToneResultDisplay",permalink:"/text_mood_processor_frontend/components/change-tone-result-display"}},r={},d=[{value:"Props",id:"props",level:2},{value:"<code>onChangeTone: () =&gt; void</code>",id:"onchangetone---void",level:3},{value:"<code>disabled: boolean</code>",id:"disabled-boolean",level:3},{value:"<code>className?: string</code>",id:"classname-string",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Features",id:"features",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"changetonebutton",children:"ChangeToneButton"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ChangeToneButton"})," component is responsible for triggering the tone change functionality. It renders a button that calls the ",(0,o.jsx)(n.code,{children:"onChangeTone"})," function when clicked. The button can also be disabled based on the ",(0,o.jsx)(n.code,{children:"disabled"})," prop."]}),"\n",(0,o.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(n.h3,{id:"onchangetone---void",children:(0,o.jsx)(n.code,{children:"onChangeTone: () => void"})}),"\n",(0,o.jsx)(n.p,{children:"A function that is called when the button is clicked. It triggers the logic to change the tone of the text."}),"\n",(0,o.jsx)(n.h3,{id:"disabled-boolean",children:(0,o.jsx)(n.code,{children:"disabled: boolean"})}),"\n",(0,o.jsxs)(n.p,{children:["A boolean that controls whether the button is disabled or not. When ",(0,o.jsx)(n.code,{children:"true"}),", the button is disabled and unclickable, with reduced opacity. When ",(0,o.jsx)(n.code,{children:"false"}),", the button is clickable."]}),"\n",(0,o.jsx)(n.h3,{id:"classname-string",children:(0,o.jsx)(n.code,{children:"className?: string"})}),"\n",(0,o.jsx)(n.p,{children:"An optional string that allows additional CSS classes to be passed to the button for styling. It defaults to an empty string."}),"\n",(0,o.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { ChangeToneButton } from './ChangeToneButton';\n\nconst Example = () => {\n  const handleChangeTone = () => {\n    console.log('Changing tone...');\n  };\n\n  return (\n    <ChangeToneButton \n      onChangeTone={handleChangeTone} \n      disabled={false} \n      className=\"p-3 bg-green-500 text-white rounded-lg\" \n    />\n  );\n};\n\nexport default Example;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Copy Modified Text"}),': There is a "Copy" button that allows the user to copy only the modified text to the clipboard. When clicked, the modified text is copied using the browser\'s navigator.clipboard.writeText method.']}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<button\n  onClick={() => navigator.clipboard.writeText(result.modified_text)}\n  className="absolute top-2 right-2 text-sm p-1 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 transition-all duration-300"\n>\n  Copy\n</button>\n'})}),"\n",(0,o.jsx)(n.p,{children:"In this example, the ChangeToneResultDisplay component renders the results of the tone change, including the original text, the modified text, and the applied tone. It also provides a button to copy the modified text."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);